#Author: Ben McDowall T822138 - Push incidents into FIR
import splunk.Intersplunk as si
import sys, json, urllib2, base64, requests, os, re, time , string
from requests.auth import HTTPBasicAuth

FIR_API_URL = "https://fir.telecom.tcnz.net/api/"

headers = {
'Authorization' : 'Token 87cbd4f75e9c5414fd8e088ceb29d5c986a56424',
'Content-type' : 'application/json'
}

if __name__ == '__main__':
    try:
        outputresults = []
        results,dummyresults,settings = si.getOrganizedResults()
        i=0
		# assuming that we create an integer field called "category" in splunk to identify different types of alerts that can be pushed out
		# for now category 1 is suspicious user  and category 2 is ids state table
		category=0;
        now = str(int(time.mktime(time.gmtime())))
        for result in results:
                if i==0:
					#  category is suspicious host
					if result['category']==1:
                        #reason = result['type']
                        data = {
                                "actor" : "29",
                                "category": "30",
                                "confidentiality": "1",
                                "description": "Pushed from Splunk by "+result['splunkuser']+"\r\n\r\nA suspicious host was found on the network\r\n\r\nDiscovery Date/Time: "+result['_time']+"\r\n\r\nHostname: "+result['dest']+"\r\n\r\nMAC: "+result['dest_mac']+"\r\n\r\nIP: "+result['dest_ip'],
                                "detection": "65",
                                "plan" : "5",
                                "concerned_business_lines" : [1],
                                "severity": "3",
                                "is_incident" : "true",
                                "status" : "O",
                                "subject": "Suspicious Host "+result['dest']+" MAC:"+result['dest_mac']

                        }
                        response = requests.post(FIR_API_URL+"incidents", headers=headers, data=json.dumps(data), verify=False)
                        outputresults.append({'fir_api' : result['dest'], 'push_status' : 'ok'})
					#	category is ids state table
					elif result['category']==2:
						datetime=(sorted (re.findall("\d{2}\/\d{2}\/\d{2}\s\d{2}:\d{2}:\d{2}\s" , results), reverse=True))[0]
						sensors=', '.join(set(re.findall("\sesm\w+?\W+?\w+?\s",results)))
						signatures=" * "+"\n * ".join(list(set(re.findall("snort:\s\[1:\d+:\d+\].*{\w+}",results))))
						sourceip= ' , '.join(set(re.findall("\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", ','.join(re.findall("\s(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}:\d+\s->)",results)))))
						xforward= ' , '.join(re.findall("(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})",repr(set(re.findall("(\d{2}\/\d{2}\/\d{2,4})\s(\d{2}:\d{2}:\d{2})\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})",results)))))
						sport= string.replace(', '.join(set(re.findall(":\d+\s" , repr(re.findall("\s(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}:\d+\s->)",results))))),":","")
						destip= ' , '.join(set(re.findall("(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})",repr(re.findall("->\s(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}):\d+",results)))))
						dport= string.replace(' , '.join(set(re.findall(":\d+" , repr(re.findall("->\s(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}:\d+)",results))))),":","")
						data = {
                                "actor" : "0",
                                "category": "0",
                                "confidentiality": "1",
                                "description": "Pushed from Splunk by "+result['splunkuser']\
								+"**BRIEF**\r\n\r\n"\
								+"* DateTime: " + datetime\
 								+"\r\n\r\n* Sensors: "+sensors\
								+"\r\n\r\n* Signatures:\r\n\r\n"+signatures\
								+"\r\n\r\n* PCAP Attached: "\
								+"\r\n\r\n**SOURCE**\r\n\r\n"\
								+"\r\n Source IP(s): "+sourceip\
								+"\r\n X-Forward-For : (Please Confirm with PCAP) "+xforward\
								+"Ports: "+sport\
								+"\r\n Hostname: "\
								+"\r\n\r\n**Destination**\r\n\r\n"\
								+"\r\n Destination IP(s): "+destip\
								+"Ports: "+dport\
								+"\r\n Hostname: "\
								+"\r\n\r\n**Add RAW data as a Nugget**\r\n\r\n",
                                "plan" : "0",
                                "concerned_business_lines" : [1],
                                "severity": "3",
                                "is_incident" : "true",
                                "status" : "O",
                                "subject": "IDS Event:  "
						}		
						response = requests.post(FIR_API_URL+"incidents", headers=headers, data=json.dumps(data), verify=False)
                        outputresults.append({'fir_api' : result['dest'], 'push_status' : 'ok'})	
                i=1
        si.outputResults(outputresults)

    except Exception, e:
        import traceback
        stack =  traceback.format_exc()
        si.generateErrorResults("Error '%s'. %s" % (e, stack))
